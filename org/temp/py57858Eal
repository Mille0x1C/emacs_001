from __future__ import print_function

import sys

# import math
# import string
import fractions
# from fractions import Fraction
from fractions import gcd

# import re
# import array
# import copy
# import functools
# import operator

import collections
# from collections import deque
# from collections import Counter

# import itertools
# import bisect
# import heapq

# from heapq import heappush
# from heapq import heappop
# from heapq import heappushpop
# from heapq import heapify
# from heapq import heapreplace
# from queue import PriorityQueue as pq
# from itertools import accumulate
# import random
# import time
from operator import mul
# from functools import reduce

input = sys.stdin.readline


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    return


# def lcm(n, m):
#     return int(n * m / gcd(n, m))

# def reduce_x(p, q):
#     common = fractions.gcd(p, q)
#     return (p // common, q // common)

# def combinations_count(n, r):
#     r = min(r, n - r)
#     numer = reduce_x(mul, range(n, n - r, -1), 1)
#     denom = reduce_x(mul, range(1, r + 1), 1)
#     return numer // denom

# def reverse_range(a, b):  # b < a ,  get [b, a)
#     return range(b, a, -1)  # range(a, b+1, -1)


def main():
    n = int(input().strip())
    s_old = input().strip()
    C = collections.Counter()
    C[s_old] += 1

    s_new = ""

    for i in range(n - 1):
        s_new = input().strip()
        C[s_new] += 1
        if C[s_new] > 1 or s_new[-1] != s_old[0]:
            print("No")
            return
        s_old = s_new
    return
